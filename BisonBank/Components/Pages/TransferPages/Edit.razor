@page "/transfers/edit"
@using Microsoft.EntityFrameworkCore
@using BisonBank.Models
@inject IDbContextFactory<BisonBank.Data.BisonBankContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Memo</PageTitle>

<h1>Edit Memo</h1>

<hr />
@if (Transfer is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Transfer" OnValidSubmit="UpdateTransfer" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Transfer.transactionID" value="@Transfer.transactionID" />
                <input type="hidden" name="Transfer.originAccount" value="@Transfer.originAccount" />
                <input type="hidden" name="Transfer.destinationAccount" value="@Transfer.destinationAccount" />
                <input type="hidden" name="Transfer.amount" value="@Transfer.amount" />
                <input type="hidden" name="Transfer.date" value="@Transfer.date" ? />
                <input type="hidden" name="Transfer.transactionType" value="@Transfer.transactionType" />
                <div class="mb-3">
                    <label for="description" class="form-label">Memo:</label>
                    <InputText id="description" @bind-Value="Transfer.description" class="form-control" />
                    <ValidationMessage For="() => Transfer.description" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/transfers">Transfer History</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int transactionID { get; set; }

    [SupplyParameterFromForm]
    private Transfer? Transfer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Transfer ??= await context.Transfer.FirstOrDefaultAsync(m => m.transactionID == transactionID);

        if (Transfer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateTransfer()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Transfer!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!TransferExists(Transfer!.transactionID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/transfers");
    }

    private bool TransferExists(int transactionid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Transfer.Any(e => e.transactionID == transactionid);
    }
}
